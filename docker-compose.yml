# ========================================
# WordPress Template Docker Compose Configuration
# ========================================
# Orchestrates MySQL and WordPress services for development environment
# Run with: docker compose up

# ========================================
# SERVICES DEFINITION
# ========================================
services:
  # ========================================
  # MySQL Database Service
  # ========================================
  mysql:
    build:
      context: ./images/mysql
      dockerfile: Dockerfile
    container_name: wordpress_mysql
    restart: unless-stopped

    # Environment variables for MySQL initialization
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}

    # Persistent volume for database data
    volumes:
      - ./mysql:/var/lib/mysql
      - mysql_logs:/var/log/mysql

    # Network configuration
    networks:
      - wordpress_network

    # Port mapping (optional - for external database access)
    ports:
      - '${MYSQL_PORT:-3306}:3306'

    # Health check to ensure database is ready
    healthcheck:
      test:
        [
          'CMD',
          'mysqladmin',
          'ping',
          '-h',
          'localhost',
          '-u',
          'root',
          '-p${MYSQL_ROOT_PASSWORD}',
        ]
      timeout: 10s
      retries: 5
      start_period: 30s
      interval: 30s

  # ========================================
  # WordPress Application Service
  # ========================================
  wordpress:
    build:
      context: ./images/wordpress
      dockerfile: Dockerfile
    container_name: wordpress_app
    restart: unless-stopped

    # Wait for database to be healthy before starting
    depends_on:
      mysql:
        condition: service_healthy

    # Environment variables for WordPress configuration
    environment:
      # Database connection settings
      WORDPRESS_DB_HOST: ${WORDPRESS_DB_HOST}
      WORDPRESS_DB_NAME: ${WORDPRESS_DB_NAME}
      WORDPRESS_DB_USER: ${WORDPRESS_DB_USER}
      WORDPRESS_DB_PASSWORD: ${WORDPRESS_DB_PASSWORD}

      # WordPress site configuration
      WORDPRESS_URL: ${WORDPRESS_URL}
      WORDPRESS_TITLE: ${WORDPRESS_TITLE}
      WORDPRESS_ADMIN_USER: ${WORDPRESS_ADMIN_USER}
      WORDPRESS_ADMIN_PASSWORD: ${WORDPRESS_ADMIN_PASSWORD}
      WORDPRESS_ADMIN_EMAIL: ${WORDPRESS_ADMIN_EMAIL}

      # WordPress security keys
      WORDPRESS_AUTH_KEY: ${WORDPRESS_AUTH_KEY}
      WORDPRESS_SECURE_AUTH_KEY: ${WORDPRESS_SECURE_AUTH_KEY}
      WORDPRESS_LOGGED_IN_KEY: ${WORDPRESS_LOGGED_IN_KEY}
      WORDPRESS_NONCE_KEY: ${WORDPRESS_NONCE_KEY}
      WORDPRESS_AUTH_SALT: ${WORDPRESS_AUTH_SALT}
      WORDPRESS_SECURE_AUTH_SALT: ${WORDPRESS_SECURE_AUTH_SALT}
      WORDPRESS_LOGGED_IN_SALT: ${WORDPRESS_LOGGED_IN_SALT}
      WORDPRESS_NONCE_SALT: ${WORDPRESS_NONCE_SALT}

      # Development settings
      WP_DEBUG: ${WP_DEBUG:-true}
      WP_DEBUG_LOG: ${WP_DEBUG_LOG:-true}
      WP_DEBUG_DISPLAY: ${WP_DEBUG_DISPLAY:-false}

    # Persistent volumes for WordPress files
    volumes:
      - ./wordpress:/var/www/html
      - wordpress_logs:/var/log/php

    # Network configuration
    networks:
      - wordpress_network

    # Port mapping for WordPress access
    ports:
      - '${WORDPRESS_PORT:-8080}:8000'

    # Health check to ensure WordPress is responding
    healthcheck:
      test: ['CMD-SHELL', 'php-fpm8.2 -t']
      timeout: 10s
      retries: 3
      start_period: 40s
      interval: 30s

# ========================================
# NETWORKS CONFIGURATION
# ========================================
networks:
  wordpress_network:
    driver: bridge
    name: wordpress_dev_network

# ========================================
# VOLUMES CONFIGURATION
# ========================================
volumes:
  # MySQL logs volume
  mysql_logs:
    driver: local
    name: wordpress_mysql_logs

  # WordPress logs volume
  wordpress_logs:
    driver: local
    name: wordpress_app_logs
